cat<-storeAnswer(cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat@answers
cat<-storeAnswer(cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat@answers
cat<-storeAnswer(grm_cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat@answers
cat<-storeAnswer(cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat<-storeAnswer(cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
estimateTheta(cat)
cat@answers
cat<-storeAnswer(grm_cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat<-storeAnswer(cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat<-storeAnswer(cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat@answers
cat<-grm_cat
cat<-grm_cat@answers<-rep(NA, 18)
cat@answers
cat<-grm_cat
cat@answers
cat<-storeAnswer(grm_cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat@answers
cat<-storeAnswer(cat, item=selectItem(grm_cat)$next_item, as.numeric(respProf[1,])[selectItem(grm_cat)$next_item])
cat@answers
cat@s
cat@lengthThreshold
cat<-storeAnswer(cat, item=selectItem(cat)$next_item, as.numeric(respProf[1,])[selectItem(cat)$next_item])
cat<-storeAnswer(cat, item=selectItem(cat)$next_item, as.numeric(respProf[1,])[selectItem(cat)$next_item])
cat@answers
estimateTheta(cat)
allEst(grm, respProf[1,])
allEst(grm_cat, respProf[1,])
allEst(list(grm_cat), respProf[1,])
# Set a threshold
grm_cat@lengthThreshold<-17
allEst(list(grm_cat), respProf[1,])
grm_cat@lengthThreshold
# Set a threshold
grm_cat@lengthThreshold<-17
grm_cat@lengthThreshold
# Set a threshold
grm_cat@lengthThreshold<-3
allEst(list(grm_cat), respProf[1,])
estimateTheta(cat)
rm(cat)
allEst<- function(catObjs=list(), resp){
#the multiple cat objects must be of the same class and be in list type
#first do for loop to go over our stopping rules having trouble creating more efficient code
store<-NULL
obj<-NULL
for (i in 1:length(catObjs)){
#create a dummy object so we can collect the model type of every catObj
obj<-c(obj, catObjs[[i]]@model)
if (length(levels(as.factor(obj)))!=1){
#if there are more than one types of catObj (ltm, grm), stop
stop("List of Cat objects must be of the same type*")
}
if (length(resp) != length(catObjs[[i]]@answers)){
#make sure answer profile is appropriate for catObj grm@answers = 18 so make sure battery has 18 questions
stop("Response profile is not compatible with Cat object.")
}
#there are 2 selection types which do not work if the first answer is not chosen
#for these we will resort back to the default "EPV" and switch back after the first question is picked
if(catObjs[[i]]@selection=="KL" | catObjs[[i]]@selection=="MFII"){
#lots going on here; go over each respondent and return  each theta value
#we do this adaptively by selecting the next question  and grabbing it from the answer profile
store<-(rbind(store,apply(resp,1,  function(catObj, answers=c()){
#throw a tryCatch in here because there are troubles with MAP
theta_est <- tryCatch({
#Bc they cant generate 1st answer we resort to EPV
orig<-catObjs[[i]]@selection
tempcatObj<-catObjs[[i]]
setSelection(tempcatObj) <-"EPV"
#here we pick the first item that "EPV" chooses
while ( answers[selectItem(tempcatObj)$next_item]== -1){
tempcatObj<-storeAnswer(catObj=tempcatObj,item=selectItem(tempcatObj)$next_item, answers[selectItem(tempcatObj)$next_item])
}
tempcatObj<-storeAnswer(catObj=tempcatObj,item=selectItem(tempcatObj)$next_item, answers[selectItem(tempcatObj)$next_item])
# after first question we flip back to KL and continue as usual
setSelection(tempcatObj) <-orig
cat<-tempcatObj
# Look to checkStopRules and identify the question selection and grab the corresponding answer
while (checkStopRules(cat)==F) {
cat<-storeAnswer(cat, item=selectItem(cat)$next_item, answers[selectItem(cat)$next_item])}
#used estimateTheta here probably could have went with estimateThetas, idk
estimateTheta(cat)
},
#back to tryCatch there are lots of potential errors so we just nip it in the bud and return an error message and NA's
error = function(cond) {
message(cond)
return(NA)
}
)
return(theta_est)
}, catObj=catObjs[[i]])))
} else
#then we do it all again with the functions that can pick the first question
store<-(rbind(store,apply(resp,1,  function(catObj, answers=c()){
theta_est <- tryCatch(
{
cat<-storeAnswer(catObj,item=selectItem(catObj)$next_item, answers[selectItem(catObj)$next_item])
while (checkStopRules(cat)==F) {
cat<-storeAnswer(cat, item=selectItem(cat)$next_item, answers[selectItem(cat)$next_item])
}
estimateTheta(cat)
},
error = function(cond) {
message(cond)
return(NA)
})
return(theta_est)
}, catObj=catObjs[[i]])))
}
store<-t(store)
colnames(store)<- paste("catObj", 1:ncol(store))
return(store)
}
allFish<-function(catObjs=list(),theta,resp){
#the multiple cat objects must be of the same class and be in list form
store<-NULL
obj<-NULL
#loop because we want to go through all catObjs
## if you want to do single catObj make sure to put it in a list(catObj)
for (i in 1:length(catObjs)){
#create a dummy object so we can collect the model type of every catObj
obj<-c(obj, catObjs[[i]]@model)
#if there are more than one types of catObj (ltm, grm), stop
if (length(unique(obj))!=1) { #USE THE @MODEL SECTION
stop("List of Cat objects must be of the same type*")
}
#make sure answer profile is appropriate for catObj grm@answers = 18 so make sure battery has 18 questions
if(length(resp) != length(catObjs[[i]]@answers)){
stop("Response profile is not compatible with Cat object.")
}
#two selection types must have the first answer, cannot generate the first answer
if(catObjs[[i]]@selection=="KL" | catObjs[[i]]@selection=="MFII"){
#lots going on here; go over each respondent and return  each theta value
#we do this adaptively by selecting the next question  and grabbing it from the answer profile
store<-(rbind(store,apply(resp,1,  function(catObj, answers=c()){
#throw a tryCatch in here because there are troubles with MAP
fish <- tryCatch({
#Bc they cant generate 1st answer we resort to EPV
orig<-catObjs[[i]]@selection
tempcatObj<-catObjs[[i]]
setSelection(tempcatObj) <-"EPV"
#here we pick the first item that "EPV" chooses
while ( answers[selectItem(tempcatObj)$next_item]== -1){
tempcatObj<-storeAnswer(catObj=tempcatObj,item=selectItem(tempcatObj)$next_item, answers[selectItem(tempcatObj)$next_item])
}
tempcatObj<-storeAnswer(catObj=tempcatObj,item=selectItem(tempcatObj)$next_item, answers[selectItem(tempcatObj)$next_item])
# after first question we flip back to KL and continue as usual
setSelection(tempcatObj) <-orig
cat<-tempcatObj
# Look to checkStopRules and identify the question selection and grab the corresponding answer
while (checkStopRules(cat)==F) {
cat<-storeAnswer(cat, item=selectItem(cat)$next_item, answers[selectItem(cat)$next_item])}
#used estimateTheta here probably could have went with estimateThetas, idk
fisherTestInfo(cat, theta[i])
},
#back to tryCatch there are lots of potential errors so we just nip it in the bud and return an error message and NA's
error = function(cond) {
message(cond)
return(NA)
}
)
return(fish)
}, catObj=catObjs[[i]])))
# colnames(store)<-  sapply(catObjs, function(x) catObjs@estimation))
}else
#apply theta basic to a set or respondents and return the values for every catObj provided by the user.
store<-(rbind(store,apply(resp,1,  function(catObj, answers=c()){
if(length(resp) != length(catObj@answers)){
stop("Response profile is not compatible with Cat object.")
}
fish <- tryCatch(
{
cat<-storeAnswer(catObj,item=selectItem(catObj)$next_item, answers[selectItem(catObj)$next_item])
while (checkStopRules(cat)==F) {
cat<-storeAnswer(cat, item=selectItem(cat)$next_item, answers[selectItem(cat)$next_item])
}
## no return statement needed
fisherTestInfo(cat,theta[i])
},
error = function(cond) {
message(cond)
return(NA)
}
)
return(fish)
}, catObj=catObjs[[i]])))
}
store<-t(store)
colnames(store)<- paste("catObj", 1:ncol(store))
return(store)
}
allOrac<- function(catObj, thetas, ans_profiles, n){
orac<-rep(NA, nrow(ans_profiles))
for (i in 1:nrow(ans_profiles)){
orac[i]<-tryCatch({
oracle(catObj=catObj,theta=thetas[i],ans_profiles=ans_profiles[i,],n=n)$theta_est
},
error = function(cond) {
message(cond)
return(NA)
}
)
}
store<-as.data.frame(orac)
colnames(store)<-" theta_est"
return(store)
}
data<-read_sav("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/raw_data/yougov.R" )
yougov<- data %>%
select(BIGFIVE_1:BIGFIVE_100)
dim(yougov)
ques<-yougov %>% map_chr(~attributes(.)$label)
colnames(ques)<-c("question", "number")
ques<-as.data.frame(ques)
colnames(ques)<-c("question", "number")
ques<-cbind(ques, rownames(ques))
colnames(ques)<-c("question", "number")
ques<-as.data.frame(ques)
ques<-apply(ques, 1,function(i){gsub("Describe self:", "",i)})
View(ques)
ques<-yougov %>% map_chr(~attributes(.)$label)
ques<-cbind(ques, rownames(ques))
ques<-as.data.frame(ques)
colnames(ques)<-c("question", "number")
ques<-cbind(ques, rownames(ques))
colnames(ques)<-c("question", "number")
ques<-apply(ques, 1,function(i){gsub("Describe self:", "",i)})
ques<-yougov %>% map_chr(~attributes(.)$label)
ques<-cbind(ques, rownames(ques))
ques<-as.data.frame(ques)
ques<-apply(ques, 2,function(i){gsub("Describe self:", "",i)})
colnames(ques)<-c("question", "number")
ques[3,1]<-"Don't mind being the center of attention.
"
View(ques)
ques<-cbind(ques, rownames(ques))
colnames(ques)<-c("question", "number")
data<-read_sav("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/fb_yg/big5_type.R" )
big5_type<-raad_xlxs("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/raw_data/yougov.R" )
big5_type<-read_xlxs("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/raw_data/yougov.R" )
big5_type<-read_xlsx("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/raw_data/yougov.R" )
big5_type<-read_xlsx("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/raw_data/big5_type" )
big5_type<-read_xlsx("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/raw_data/big5_type.xlsx" )
big5_type<-read_xlsx("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/fb_yg/big5_type.xlsx" )
View(big5_type)
tri<-stringdist_inner_join(big5_type,ques, by="question")
library(ggplot2)
library(catSurv)
library(scales)
library(dplyr)
library(plyr)
library(latex2exp)
library(purrr)
library(haven)
library(dplyr)
library(foreign)
library(catSurv)
library(readxl)
tri<-stringdist_inner_join(big5_type,ques, by="question")
library(fuzzyjoin)
big5_type[18,1]
big5_type
View(big5_type)
View(ques)
big5_type[45,1]<- "Avoid contact with others"
tri<-stringdist_inner_join(big5_type,ques, by="question")
View(tri)
tri<-merge(big5_type, ques, by="question")
View(tri)
tri<-merge(big5_type, ques, by="question")
View(tri)
tri<-merge(big5_type, ques, by="question")
tri
tri<-stringdist_outer_join(big5_type,ques, by="question")
tri<-append(big5_type, ques, by="question")
tri<-append(big5_type, ques, by=c("question"))
tri<-merge(big5_type, ques, by=c("question"))
View(tri)
View(big5_type)
tri<-stringdist_outer_join(big5_type,ques, by="question")
outer_join
tri<-inner_join(big5_type,ques, by="question")
big5_type<-as.data.frame(big5_type)
tri<-inner_join(big5_type,ques, by="question")
ques<-as.data.frame(ques)
tri<-inner_join(big5_type,ques, by="question")
View(tri)
tri<-inner_join(big5_type,ques, by=question)
tri<-inner_join(big5_type,ques)
View(tri)
class(ques)
class(ques[1,1])
ques[1,1]
as.character(ques[1,1])
ques
ques<-apply(ques,1, as.character(ques[1,1]))
ques<-apply(ques,1, function(i) {as.character(i)})
ques
big5_type<-read_xlsx("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/fb_yg/big5_type.xlsx" )
ques<-yougov %>% map_chr(~attributes(.)$label)
ques<-as.data.frame(ques)
ques<-apply(ques, 1,function(i){gsub("Describe self:", "",i)})
ques<-cbind(ques, rownames(ques))
colnames(ques)<-c("question", "number")
ques
god<-ques[1:100]
god
god<-as.character(ques[1:100])
rownames(yougov)
dam<-yougov %>% map_chr(~attributes(.)$label)
ques<-cbind(god, rownames(dam))
colnames(ques)<-c("question", "number")
ques
rownames(dam)
dam<-yougov %>% map_chr(~attributes(.)$label)
dam
rownames(dam)
dam<-as.data.frame(dam)
rownames(dam)
ques<-cbind(god, rownames(dam))
ques
big5_type
data
View(data)
class(ques[1,1])
ques[3,1]<-"Don't mind being the center of attention."
View(ques)
tri<-merge(big5_type, ques, by=c("question"))
tri<-merge(big5_type, ques, by="question")
tri<-merge(big5_type, ques, by=question)
tri<-inner_join(big5_type,ques)
class(big5_type[1,1])
as.character(big5_type)
class(big5_type[1,1])
big5_type[1:100,1]
god<-big5_type[1:100,1]
god<-as.character(god)
god
god<-as.data.frame(god)
god
god<-big5_type[1:100,1]
god
View(god)
class(big5_type[1,1])
god<-as.character(big5_type[1,1])
class(god)
god<-big5_type[1:100,1]
god
god<-apply(big5_type, 1,as.character(big5_type[1,1]))
big5_type[,1]
god<-apply(big5_type, 1,function(x){as.character(x[,1])})
big5_type
tri<-merge(big5_type, ques, by=question)
tri<-merge(big5_type, ques, by='question')
tri<-merge(big5_type, ques, by=('question')
tri<-merge(big5_type, ques, by=('question'))
tri<-merge(big5_type, ques, by=('question'))
tri<-merge(big5_type, ques, by=c('question'))
tri<-inner_join(big5_type,ques)
god<-apply(big5_type, 1,function(x){as.character(x[,1])})
god<-apply(big5_type, 1,function(x){as.character(x)})
god
god<-big5_type[1:100,1]
god
god<-apply(god, 1,function(x){as.character(x)})
god
god<-as.data.frame(god)
ques<-cbind(god, rownames(dam))
ques
god
View(yougov)
dam<-yougov %>% map_chr(~attributes(.)$label)
dam
dam<-as.data.frame(dam)
dam
ques<-yougov %>% map_chr(~attributes(.)$label)
ques
ques<-apply(ques, 1,function(i){gsub("Describe self:", "",i)})
ques<-as.data.frame(ques)
ques
ques<-apply(ques, 1,function(i){gsub("Describe self:", "",i)})
ques
ques<-as.data.frame(ques)
ques
god<-apply(ques, 1,function(x){as.character(x)})
god
god<-as.data.frame(god)
god
rownames(dam)
ques <-cbind(god, rownames(dam))
ques
tri<-merge(big5_type, ques, by=c('question'))
tri<-inner_join(big5_type,ques)
ques
colnames(ques)<-c("question", "number")
ques
tri<-inner_join(big5_type,ques)
tri
View(tri)
tri<-merge(big5_type, ques, by=c('question'))
tri
View(big5_type)
View(ques)
tri<-merge(big5_type, ques, by=c('question'))
class(big5_type[1,1])
class(ques[1,1])
class(god[1,1])
god<-apply(ques, 1,function(x){as.character(x)})
class(god[1,1])
big5_type[,1]
class(big5_type[1,1])
ques<-yougov %>% map_chr(~attributes(.)$label)
ques
ques<-as.data.frame(ques)
ques<-apply(ques, 1,function(i){gsub("Describe self:", "",i)})
ques
ques<-as.data.frame(ques)
ques
god<-apply(ques, 1,function(x){as.character(x)})
god
god<-as.data.frame(god)
god
rownames(dam)
ques <-cbind(god, rownames(dam))
ques
big5_type<-read_xlsx("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/fb_yg/big5_type.xlsx" )
View(big5_type)
class(big5_type[1,1])
god<-apply(big5_type, 1,function(x){as.character(x)})
god
data<-read_sav("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/raw_data/yougov.R" )
big5_type<-read_xlsx("C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/fb_yg/big5_type.xlsx" )
order<-data
order
data[3:103]
yougov<- data[3:103]
View(yougov)
yougov<- data %>%
select(BIGFIVE_1:BIGFIVE_100)
class(yougov)
yougov
ques<-yougov %>% map_chr(~attributes(.)$label)
ques
class(ques)
class(ques[1,1])
source('C:/Users/dl0ck/OneDrive/Documents/Summer 2018/Montgomery/catSurv_dl/big 5/fb_yg/fb_yg_script.R', echo=TRUE)
class(ques[1])
class(big5_type[1,1])
big5_type[1:100,1]
god<-big5_type[1:100,1]
god
god<-as.data.frame(god)
god
big5_type[1:100,2]
god<-cbind(god, big5_type[1:100,2])
class(god[1])
class(god[1,1])
tri<-inner_join(big5_type,ques)
tri<-inner_join(god,ques)
god
tri<-merge(god, ques, by=c('question'))
tri<-merge(god, ques, by=c('question'))
tri<-merge(god, ques,by.x= "question", by.y= "question")
tri<-merge(god, ques,by.x= "question", by.y= "question")
god[1,]
ques[1,]
ques[1]
dam<-as.data.frame(big5_type)
dam
dam<-as.data.frame(god)
dam
god[1,]
ques[1]
ques<-as.data.frame(ques)
ques
ques<-apply(ques, 1,function(i){gsub("Describe self:", "",i)})
ques
ques<-as.data.frame(ques)
ques
god[45,1]
god[45,1]<- "Avoid contact with others"
ques[3,1]<-"Don't mind being the center of attention."
ques[3,1]
ques
ques[3,1]
ques[1:100]
ques[1:100,]
dam<-ques[1:100,]
dam
class(dam[1,1])
class(dam[1])
dam<-apply(dam, 1,function(x){as.character(x)})
class(dam[1])
dam
dam[1]
as.character(dam[1])
dam<-apply(dam, 1,function(x){as.character(x)})
dams<-as.data.frame(dam)
dam<-as.data.frame(dam)
dam
class(dam[1])
class(dam)
dam[1]
class(dam[1,1])
dam[1,1]
class(big5_type[2,1])
dam[2,1]
dam<-apply(dam, 1,function(x){as.character(x[1:length(x),1])})
dam[2,1]
